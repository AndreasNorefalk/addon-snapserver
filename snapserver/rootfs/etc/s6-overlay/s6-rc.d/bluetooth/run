#!/command/with-contenv bash

set -euo pipefail

log() {
    local level="$1"
    shift
    printf '[%s] %s\n' "$level" "$*"
}

log_info() {
    log "INFO" "$@"
}

log_warning() {
    log "WARN" "$@"
}

log_info "[BT] Waiting for system bus"
for _ in $(seq 1 50); do
    if [[ -S /var/run/dbus/system_bus_socket ]]; then
        break
    fi
    sleep 0.1
done

if [[ ! -S /var/run/dbus/system_bus_socket ]]; then
    log_warning "[BT] system bus socket not available after waiting"
fi

log_info "[BT] Starting bluetoothd"
if pidof bluetoothd >/dev/null 2>&1; then
    log_warning "[BT] Detected an existing bluetoothd process on the host. Skipping internal daemon startup."
    exec tail -f /dev/null
fi

if [[ ! -d /sys/class/bluetooth ]] || ! compgen -G '/sys/class/bluetooth/hci*' >/dev/null; then
    log_warning "[BT] No Bluetooth kernel interfaces detected. Skipping internal daemon startup."
    exec tail -f /dev/null
fi

disabled_plugins=(sap bap bass mcp vcp micp ccp csip rfkill)
plugin_arg="$(IFS=,; echo "${disabled_plugins[*]}")"

cmd=(/usr/lib/bluetooth/bluetoothd --nodetach --noplugin="${plugin_arg}")
"${cmd[@]}" &
bt_pid=$!

# Give the daemon a moment to fail fast (for example when another instance
# already owns the Bluetooth resources on the host).
sleep 1
if ! kill -0 "${bt_pid}" 2>/dev/null; then
    wait "${bt_pid}" || true
    exit_code=$?
    log_warning "[BT] bluetoothd failed to start (exit code: ${exit_code}). Continuing without the bundled daemon."
    exec tail -f /dev/null
fi

terminate() {
    local sig=${1:-TERM}
    if kill -0 "${bt_pid}" 2>/dev/null; then
        kill -s "${sig}" "${bt_pid}"
    fi
}

trap 'terminate TERM' TERM
trap 'terminate INT' INT
trap 'terminate QUIT' QUIT

set +e
wait "${bt_pid}"
exit_code=$?
set -e

log_info "[BT] bluetoothd exited with code ${exit_code}"
exit "${exit_code}"
